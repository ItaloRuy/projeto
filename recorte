import numpy as np
import cv2

if __name__ == "__main__":
    image = cv2.imreadmulti("caminho") 
    # le e divide as imagens em um vetor de 4 posicoes
    #print(np.shape(foto))
    b1, b2, b3, b4 = [x for x in foto[1]] # extrai as 4 imagens do vetor
    #
    # Recorta as imagens para que se encaixem
    #
    b2 = b2[7:,9:]
    b3 = b3[25:, 1:]
    b4 = b4[33:, 5:]
    # Recorta as imagens para todas terem o mesmo tamanho
    b1 = b1[:991,:1271]
    b2 = b2[:991,:1271]
    b3 = b3[:991, :1271]
    b4 = b4[:991, :1271]
    #Mostra imagens
    cv2.imshow("banda 1", b1)
    cv2.imshow("banda 2", b2)
    cv2.imshow("banda 3", b3)
    cv2.imshow("banda 4", b4)
    # Salva imagens
    #cv2.imwrite("banda1.png", b1)
    #cv2.imwrite("banda2.png", b2)
    #cv2.imwrite("banda3.png", b3)
    #cv2.imwrite("banda4.png", b4)
    #
    #
    #   TESTES PARA RECORTE SOMENTE DA FOLHA
    #   --TENTATIVA--:
    #       TESTAR CANNY EDGE PARA SELECIONAR AS BORDAS, AUMENTAR AS BORDAS COM MORFOLOGIA MATEM√ÅTICA CRIANDO UMA MASCARA
    #       E SELECIONAR NA IMAGEM ORIGINAL SOMENTE OS PIXELS DA MASCARA
    #
    aux = cv2.GaussianBlur(b1, (11, 11), 1.4)
    #recorte = cv2.inRange(aux, 110, 255)
    recorte = cv2.threshold(aux, 127, 255, cv2.THRESH_OTSU)
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))
    recorte = cv2.dilate(recorte[1], kernel)
    cv2.imshow("Mascara", recorte)
    '''
    aux = cv2.GaussianBlur(b1, (5, 5), 3)
    mediana = np.median(aux)
    sigma = 0.4
    lower, upper = [mediana + mediana * sigma, mediana - mediana * sigma]
    canny = cv2.Canny(aux, 50, 100)
    #
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(3,3))
    canny = cv2.dilate(canny, kernel)
    #
    height, width = aux.shape[:2]
    mask = np.zeros((height+2, width+2), np.uint8)     # line 26
    cv2.floodFill(canny, mask, (0, 0), 255)
    '''
    #cv2.floodFill(canny, mask, (0, 0), 0)
    #canny = cv2.bitwise_not(canny)
    #
    #kernel = np.array([[0,0,1,0,0], [0,1,1,1,0], [1,1,1,1,1], [0,1,1,1,0], [0,0,1,0,0]], dtype=np.uint8)
    #kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(2,2))
    #canny = cv2.morphologyEx(canny, cv2.MORPH_CLOSE, kernel)
    #canny = cv2.erode(canny, kernel)
    #kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(30,30))
    #canny = cv2.dilate(canny, kernel)
    #
    #canny = cv2.bitwise_or(aux, canny)
    #canny = cv2.bitwise_and(b1, b2)

    #cv2.imshow("Canny", canny)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
'''
    NDVI = NIR - RED / NIR + RED
    h w
    w-9 h-7
    w-1 h-25
    w-5 h-33
'''
